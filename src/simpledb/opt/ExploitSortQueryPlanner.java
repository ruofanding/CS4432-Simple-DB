package simpledb.opt;

import java.util.ArrayList;
import java.util.Collection;

import simpledb.parse.QueryData;
import simpledb.query.Plan;
import simpledb.query.ProjectPlan;
import simpledb.tx.Transaction;

public class ExploitSortQueryPlanner extends HeuristicQueryPlanner{
	Plan firstPlan = null;
	String firstPlanTblname = null;
	@Override
	/**
	 * CS4432-Project2: it will sort the original table if it is sorted.
	 */
	public Plan createPlan(QueryData data, Transaction tx) {

		// Step 1: Create a TablePlanner object for each mentioned table
		for (String tblname : data.tables()) {
			TablePlanner tp = new TablePlanner(tblname, data.pred(), tx);
			tableplanners.add(tp);
		}

		// Step 2: Choose the lowest-size plan to begin the join order
		Plan currentplan = getLowestSelectPlan();

		// Step 3: Repeatedly add a plan to the join order
		while (!tableplanners.isEmpty()) {
			Plan p = getLowestJoinPlan(currentplan);
			if (p != null)
				currentplan = p;
			else
				// no applicable join
				currentplan = getLowestProductPlan(currentplan);
		}


		// Step 4. Project on the field names and return
		return new ProjectPlan(currentplan, data.fields());
	}

	private Plan getLowestSelectPlan() {
		TablePlanner besttp = null;
		Plan bestplan = null;
		for (TablePlanner tp : tableplanners) {
			Plan plan = tp.makeSelectPlan();
			if (bestplan == null
					|| plan.recordsOutput() < bestplan.recordsOutput()) {
				besttp = tp;
				bestplan = plan;
			}
		}
		firstPlan = bestplan;
		firstPlanTblname = besttp.tblname;
		tableplanners.remove(besttp);
		return bestplan;
	}
	
	private Plan getLowestJoinPlan(Plan current) {
		TablePlanner besttp = null;
		Plan bestplan = null;
		String tblname = null;
		if(current == firstPlan){
			tblname = firstPlanTblname;
		}
		for (TablePlanner tp : tableplanners) {

			Plan plan = tp.makeMergeJoinPlan(current, tblname);
			if (plan != null
					&& (bestplan == null || plan.recordsOutput() < bestplan
							.recordsOutput())) {
				besttp = tp;
				bestplan = plan;
			}
		}
		if (bestplan != null)
			tableplanners.remove(besttp);
		return bestplan;
	}
}
